ARCHITECTURE

    This is an 8 bit CPU with 64Kb of memory, with data stored in little endian.

    The memory is divided in six parts : stack memory, RAM, variable memory, screen pixel memory, character memory, and ROM. 
    Stack memory is only a byte long, from address 0x0000 to 0x00FF. 
    RAM is reusable memory from 0x0100 to 0xCD32.
    Variable memory is 2 bytes long, from 0xCD33 to 0xCF32.
    Screen Pixel Memory is 3840 bits longs, from 0xCF33 to 0xDE31. (80 x 48 pixel screen)
    Character memory is 462 bits long, from 0xDE32 to 0xDFFF.
    ROM is 2 words long, from 0xE000 to 0xFFFF.
    
    The reset location is address 0xFFFD.

REGISTERS

    Program Counter (PC). This is a 2 byte, 16 bit, register.
    The value is automatically updated as instructions are being executed, or
        can be updated manually via a jump command.

    Stack Pointer (SP). This a 1 byte, 8 bit, register.
    Stores the next free location on the stack.
    Stack location is fixed and cannot be moved.
    Because its range is from 0x0000 to 0x00FF, only a byte is needed to store address.

    General Registers (A, B, C, D, E, F, G, H). These are all 8 bit registers.
    There are no accumulator registers. 
    Starting from A, their value is 0x00 to 0x07

    Processor Flags (PF). For the sake of simplicity, this register is 1 byte, 8 bits, long.
    There are only 4 flags, whose values are stored in the lower 4 bits of the register.
    In order of LSB to MSB, 
    Carry Flag (CF), Zero Flag, (ZF), Overflow Flag (OF), and Sign Flag (SF). 
        CF is set if last operation causes 1. overflow from bit 7, or 2. undeflow from bit 0.
        ZF is set if result of last operation was a 0.
        OF is set if result yielded invalid 2's complement result. 
            Determined by looking at carry bits between bits 6 and 7 and bit 7 and carry flag.
        SF is set if the last operation set bit 7 to a one. 

INSTRUCTIONS

    There 53 different instructions 
    All but the stack instructions are general because of the amount of general registers.

    OPCODE	KEYWORD     OPERAND 1	OPERAND 2 	AFFECTED FLAGS	BYTES	OPERATION
    0x01	LDFM	    Reg	        Mem	        SF, ZF	        4	    Load data to reg from mem
    0x02	LDFI	    Reg	        Imm	        SF, ZF	        3	    Load to reg imm
    0x03	LDFR	    Reg1	    Reg2		                3	    Load to reg1 from reg2
    0x04	STOR	    Mem	        Reg		                    4	    Store to mem from reg
    0x05	SWPR	    Reg1	    Reg2		                3	    Swap reg1 and reg2 values. Will use register H to store a temporary value
    0x06	SWPM	    Mem1	    Mem2		                5   	Swap mem1 and mem2 values. Will use registers G and H to store temporary values
    0x07	PULR	    Reg		                SF, ZF	        2	    Pull to reg from SP - 1
    0x08	PSHR	    Reg			                            2	    Push to SP from reg
    0x09	PSHM	    Mem			                            3   	Push to SP from mem
    0x0A	PULC				                                1   	Pull to PC from SP - 1
    0x0B	PSHC				                                1   	Push to SP from PC
    0x0C	PULF				                                1   	Pull to PF from SP - 1
    0x0D	PSHF				                                1   	Push to SP from PF
    0x0E	AND	        Reg1	    Reg2	    SF, ZF	        3	    And contents of reg1 with reg2, storing result in reg1
    0x0F	EOR	        Reg1	    Reg2	    SF, ZF	        3	    Xor contents of reg1 with reg2, storing result in reg1
    0x10	ORA	        Reg1	    Reg2	    SF, ZF	        3	    Or contents of reg1 with reg2, storing result in reg1
    0x11	NOT	        Reg		                SF, ZF  	    2	    Not the contents of reg, storing result in reg
    0x12	ADD	        Reg1	    Reg2	    CF, SF, ZF, OF	3	    Add contents of reg1 with reg2, storing result in reg1
    0x13	SUB	        Reg1	    Reg2	    CF, SF, ZF, OF	3	    Subtract contents of reg1 with reg2, storing result in reg1
    !0x14	MULT	    Reg1	    Reg2	    CF, SF, ZF, OF	3	    Multiply contents of reg1 with reg2, storing result in reg1
    !0x15	DIV	        Reg1	    Reg2	    CF, SF, ZF, OF	3	    Divide contents of reg1 with reg2, storing result in reg1
    0x16	CMPR	    Reg1	    Reg2	    CF, SF, ZF	    3	    Compare contents of reg1 with reg2. CF is set if reg1 >= reg2, ZF is set if reg1 = reg2
    0x17	CMPM	    Reg	        Mem	        CF, SF, ZF	    4	    Compare contents of reg with mem. CF is set if reg >= mem ZF is set if reg = mem
    0x18	CMPI	    Reg	        Imm	        CF, SF, ZF	    3	    Compare contents of reg with imm. CF is set if reg >= imm, ZF is set if reg = imm
    0x19	INCR	    Reg		                SF, ZF	        2	    Increment value held in register
    0x1A	INCM	    Mem		                    	        3	    Increment value held in memory
    0x1B	DECR	    Reg		                SF, ZF	        2	    Decrement value held in register
    0x1C	DECM	    Mem		                    	        3	    Decrement value held in memory
    0x1D	SHLR	    Reg		                CF, SF, ZF	    2   	Shift contents in register left by 1 bit. CF becomes value of the old MSB
    0x1E	SHRR	    Reg		                CF, SF, ZF	    2   	Shift contents in register right by 1 bit. CF becomes value of the old LSB
    0x1F	SHLM	    Mem		                        	    3   	Shift contents in memory left by 1 bit.
    0x20	SHRM	    Mem		                        	    3   	Shift contents in memory right by 1 bit.
    0x21	JMP	        Imm			                            2	    Set PC to imm. 
    0x22	JSR	        Imm			                            3	    Set PC to address stored in mem
    0x23	RSR				                                    1	    Return to previously stored address in stack
    0x24	JSC	        Imm			                            2	    Set PC to imm if SF is not set
    0x25	JSS	        Imm			                            2	    Set PC to imm if SF is set
    0x26	JCC	        Imm			                            2	    Set PC to imm if CF is not set
    0x27	JCS	        Imm			                            2	    Set PC to imm if CF is set
    0x28	JOC	        Imm			                            2	    Set PC to imm if OF is not set
    0x29	JOS	        Imm			                            2	    Set PC to imm if OF is set
    0x2A	JZC	        Imm			                            2	    Set PC to imm if ZF is not set
    0x2B	JZS	        Imm			                            2	    Set PC to imm if ZF is set
    0x2C	CCF			                        CF	            1	    Clear CF
    0x2D	SCF			                        CF	            1	    Set CF
    0x2E	CSF			                        SF	            1	    Clear SF
    0x2F	SSF			                        SF	            1	    Set SF
    0x30	COF			                        OF	            1	    Clear OF
    0x31	SOF			                        OF	            1	    Set OF
    0x32	CZF			                        ZF	            1	    Clear ZF
    0x33	SZF			                        ZF	            1	    Set ZF
    0x34	NOP				                                    1	    No operation
    0x35	HALT				                                1	    Stops CPU
    0x37    STRT                                                        Marks entry option of program (optional for procedural programs)
    0x38    LDFMN       Reg         Mem         SF, ZF	        5	    Load data to reg from mem, nested array
    0x39    STORN       Mem         Reg                         5       Store to mem, nested arrays, from reg
    0x3A    SWPMN       Mem1        Mem2                        6   	Swap mem1 and mem2 values, both nested arrays. Will use registers G and H to store temporary values
    0x3B    PSHMN       Mem			                            4   	Push to SP from mem, nested array                                  
    0x3C    CMPMN       Reg	        Mem	        CF, SF, ZF	    5	    Compare contents of reg with mem, nested array. CF is set if reg >= mem ZF is set if reg = mem
    0x3D    INCMN       Mem		                    	        4	    Increment value held in memory, nested array
    0x3E    DECMN       Mem		                    	        4	    Decrement value held in memory, nested array
    0x3F    SHLMN       Mem		                        	    4   	Shift contents in memory, nested array left by 1 bit.
    0x40    SHRMN       Mem		                        	    4   	Shift contents in memory, nested array right by 1 bit.


UPDATES

    Separate section in memory for programs, 
        separate section for character memory for output screen,
        separate section for variable memory for programs,
        separate section for video memory for color section per pixel



