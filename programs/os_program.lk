; The OS should run each program in its p_stack. 
; It should "call" the loader_program, give execution to the loaded program
; And when the program runs into a HALT instruction, it will give execution back to the OS
; The program will jump back to run section of the OS, with updated values to point to the next program,
; and while the run section's p_stack offset does not match the p_stack counter in address &FF82, load the next program

.variables
    ; aux_mem address LOW   &FF84
    ; aux_mem address HIGH  &FF83
    ; p_stack counter       &FF82
    ; p_stack address       &FF85

.data
_add
    LDFM @A &FF84
    CMPI @A %255
    JZS #inc
    INCR @A
    RSR

    #inc
    LDFM @B &FF83
    LDFI @A %0
    INCR @B
    RSR

_start
    ; Reset the values of the p_stack counter, and aux_mem address
    LDFI @A %0
    LDFI @F %0
    STOR &FF84 @A
    STOR &FF83 @A

    #start
    ; Set address to get value from in aux_mem
    LDFM @A &FF84
    STOR &DA58 @A
    LDFM @A &FF83
    STOR &DA59 @A

    ; Waiting a clock cycle aux_mem IO to get value
    ; Check that the value is not 0
    LDFM @A &DA5B
    LDFM @B &DA5C
    CMPR @A @B
    JZC #loop
    CMPI @A %0
    JZS #end    

    #loop
    ; Same address is start of program
    LDFM @C &FF84
    STOO &FF85 @C
    INCR @F
    LDFM @C &FF83
    STOO &FF85 @C
    INCR @F

    ; Value at current address + 1 is end of program
    JSR _add
    STOR &DA58 @A
    STOR &DA59 @B
    LDFM @A &DA5B
    LDFM @B &DA5C
    STOO &FF85 @A
    INCR @F
    STOO &FF85 @B
    INCR @F
    STOR &FF84 @A
    STOR &FF83 @B    

    STOR &FF82 @F
    LDFM @F &FF82
    JMP #start

    #end
    HALT
