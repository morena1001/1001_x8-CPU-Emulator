.variables
  $h_size %0
  $unH_size %0
  $s_size %0
  $unS_size %0
  $var_size %0

  $h_offset %0
  $unH_offset %0
  $s_offset %0
  $unS_offset %0
  $var_offset %0

  $RAM_offset %0
  $p_stack_offset %0
  $aux_offset_L %0
  $aux_offset_H %0
  $low_byte %0
  $high_byte %0
  $high_next %0

  $instruction %0
  $opcode %0
  $end_addr

.data
_Increment_Address
  ; Grabs the address stored in registers C (low) and D (high) and increments it by one
  CMPI @C %255
  JZS #inc_low
  INCR @C
  RSR

  #inc_low
  LDFI @C %0  
  INCR @D
  RSR

_Increment_Aux_Address
  ; Increment aux mem offset address
  LDFM @C $aux_offset_L
  LDFM @D $aux_offset_H
  JSR _Increment_Address
  STOR $aux_offset_L @C
  STOR $aux_offset_H @D
  RSR

_Grab_Low
  ; Load the aux_mem offset address into the setter bytes of the IO
  LDFM @A %aux_offset_L
  STOR &DA58 @A
  LDFM @A %aux_offset_H
  STOR &DA59 @A

  ; Get the lower byte value stored at the aux mem offset address from the getter bytes of the IO
  LDFM @A &DA5B
  STOR $low_byte @A
  RSR

_Grab_High
  ; Load the aux_mem offset address into the setter bytes of the IO
  LDFM @A %aux_offset_L
  STOR &DA58 @A
  LDFM @A %aux_offset_H
  STOR &DA59 @A

  ; Get the higher byte value stored at the aux mem offset address from the getter bytes of the IO
  LDFM @A &DA5C
  STOR $high_byte @A
  RSR

_Split_Bytes
  ; Load the aux_mem offset address into the setter bytes of the IO
  LDFM @A %aux_offset_L
  STOR &DA58 @A
  LDFM @A %aux_offset_H
  STOR &DA59 @A

  ; Get the two bytes stored at the aux mem offset address from the getter bytes of the IO
  LDFM @A &DA5B
  STOR $low_byte @A
  LDFM @A &DA5C
  STOR $high_byte @A
  JSR _Increment_Aux_Address
  RSR

_Grab_Byte
  ; Grabs the low byte if high_next is false, else grabs the high byte
  LDFM @A $high_next
  CMPI @A %0
  JZS #grab_low

  #grab_high
  JSR _Grab_High
  LDFI @A %0
  STOR $high_next @A

  JSR _Increment_Aux_Address
  RSR 

  #grab_low
  JSR _Grab_Low
  LDFI @A %1
  STOR $high_next @A
  RSR

_Grab_Word
  ; Grabs a word from aux mem offset address
  LDFM @A $high_next
  CMPI @A %0
  JZS #split

  JSR _Grab_High
  JSR _Increment_Aux_Address
  JSR _Grab_Low

  #split
  JSR _Split_Bytes
  RSR

_Start
  
  
